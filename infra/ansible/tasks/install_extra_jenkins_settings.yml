# ---------------------------------------------------------------------------
# 0.  Packages: Nginx + Certbot
# ---------------------------------------------------------------------------
- name: Ensure Nginx and Certbot packages are present
  ansible.builtin.apt:
    name:
      - nginx
      - certbot
      - python3-certbot-nginx
    state: present
    update_cache: yes

# ---------------------------------------------------------------------------
# 1.  Temporary HTTP-only proxy (for ACME HTTP-01 challenge)
# ---------------------------------------------------------------------------
- name: Install temporary HTTP-only vhost
  ansible.builtin.copy:
    dest: /etc/nginx/sites-available/jenkins-temp.conf
    mode: "0644"
    content: |
      server {
          listen 80 default_server;
          server_name _;
          location / {
              proxy_pass          http://127.0.0.1:8080;
              proxy_set_header    Host              $host;
              proxy_set_header    X-Real-IP         $remote_addr;
              proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
              proxy_set_header    X-Forwarded-Proto $scheme;
              proxy_buffering     off;
          }
      }
  notify: reload nginx

- name: Enable temporary vhost & remove distro default
  ansible.builtin.file:
    src:  /etc/nginx/sites-available/jenkins-temp.conf
    dest: /etc/nginx/sites-enabled/jenkins-temp.conf
    state: link
  notify: reload nginx

- name: Ensure default “welcome” vhost is absent
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: reload nginx

# ---------------------------------------------------------------------------
# 2.  Try every public suffix until Certbot succeeds
# ---------------------------------------------------------------------------
- name: Initialise success flag
  set_fact:
    cert_obtained: false
    jenkins_live_domain: ""

- name: Run Certbot for each candidate domain
  shell: |
    DOMAIN="jenkins.{{ jenkins_public_ip }}.{{ item }}"
    if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
      certbot --nginx --non-interactive --agree-tos \
              --email {{ letsencrypt_email }} \
              --redirect \
              -d "${DOMAIN}"
    fi
  args:
    executable: /bin/bash            # makes the if-statement work
  register: certbot_attempts          # collects *all* loop results
  failed_when: false                  # don’t abort the play on errors
  loop: "{{ public_suffixes }}"
  loop_control:
    label: "jenkins.{{ jenkins_public_ip }}.{{ item }}"
  notify: reload nginx

- name: Record winning domain (if any)
  set_fact:
    cert_obtained: true
    jenkins_live_domain: "{{ item.item | ternary('jenkins.' ~ jenkins_public_ip ~ '.' ~ item.item, '') }}"
  when: item.rc is defined and item.rc == 0
  loop: "{{ certbot_attempts.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Abort when no certificate could be obtained
  fail:
    msg: |
      Could not obtain a Let’s Encrypt certificate after trying:
      {{ public_suffixes | map('regex_replace', '(.*)', 'jenkins.' ~ jenkins_public_ip ~ '.\\1') | join(', ') }}
  when: not cert_obtained

# ---------------------------------------------------------------------------
# 3.  Permanent HTTP→HTTPS & HTTPS proxy vhosts
# ---------------------------------------------------------------------------
- name: Install permanent HTTP→HTTPS redirect vhost
  ansible.builtin.copy:
    dest: /etc/nginx/sites-available/jenkins-http.conf
    mode: "0644"
    content: |
      server {
          listen 80;
          server_name {{ jenkins_live_domain }};
          return 301 https://$host$request_uri;
      }
  notify: reload nginx

- name: Install permanent HTTPS proxy vhost
  ansible.builtin.copy:
    dest: /etc/nginx/sites-available/jenkins-ssl.conf
    mode: "0644"
    content: |
      server {
          listen 443 ssl http2;
          server_name {{ jenkins_live_domain }};

          ssl_certificate     /etc/letsencrypt/live/{{ jenkins_live_domain }}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/{{ jenkins_live_domain }}/privkey.pem;

          ssl_protocols       TLSv1.2 TLSv1.3;
          ssl_session_cache   shared:SSL:10m;
          ssl_prefer_server_ciphers on;

          location / {
              proxy_pass          http://127.0.0.1:8080;
              proxy_set_header    Host              $host;
              proxy_set_header    X-Real-IP         $remote_addr;
              proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
              proxy_set_header    X-Forwarded-Proto $scheme;
              proxy_buffering     off;
          }
      }
  notify: reload nginx

- name: Enable permanent vhosts & remove temporary one
  block:
    - name: Enable HTTP redirect vhost
      ansible.builtin.file:
        src:  /etc/nginx/sites-available/jenkins-http.conf
        dest: /etc/nginx/sites-enabled/jenkins-http.conf
        state: link

    - name: Enable HTTPS proxy vhost
      ansible.builtin.file:
        src:  /etc/nginx/sites-available/jenkins-ssl.conf
        dest: /etc/nginx/sites-enabled/jenkins-ssl.conf
        state: link

    - name: Remove temporary vhost symlink
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/jenkins-temp.conf
        state: absent

    - name: Remove temporary vhost file
      ansible.builtin.file:
        path: /etc/nginx/sites-available/jenkins-temp.conf
        state: absent
  notify: reload nginx

# ---------------------------------------------------------------------------
# 4.  Make sure certbot renewals run automatically
# ---------------------------------------------------------------------------
- name: Ensure certbot.timer is enabled and started
  ansible.builtin.systemd:
    name: certbot.timer
    enabled: true
    state: started

# ---------------------------------------------------------------------------
# 5.  Lock Jenkins to localhost
# ---------------------------------------------------------------------------
- name: Bind Jenkins HTTP listener to 127.0.0.1
  ansible.builtin.lineinfile:
    path: /etc/default/jenkins
    regexp: '^HTTP_HOST='
    line: 'HTTP_HOST=127.0.0.1'
    state: present
  notify: restart jenkins

# ---------------------------------------------------------------------------
# 6.  Read admin password & wait until Jenkins is up
# ---------------------------------------------------------------------------
- name: Read initial admin password
  ansible.builtin.slurp:
    src: /var/lib/jenkins/secrets/initialAdminPassword
  register: initial_pw
  run_once: true

- name: Cache admin password fact
  ansible.builtin.set_fact:
    jenkins_admin_password: "{{ initial_pw.content | b64decode | trim }}"

- name: Wait for Jenkins login page to respond
  ansible.builtin.uri:
    url: "http://localhost:8080/login"
    status_code: 200
  register: jstat
  retries: 10
  delay: 15
  until: jstat.status == 200

- name: Write Groovy script to create Jenkins user
  copy:
    dest: /tmp/create_user.groovy
    content: |
      import jenkins.model.*
      import hudson.security.*

      def instance = Jenkins.getInstance()
      def hudsonRealm = instance.getSecurityRealm()

      hudsonRealm.createAccount("{{ jenkins_username }}", "{{ jenkins_password }}")
      instance.save()

- name: Download Jenkins CLI jar
  get_url:
    url: "http://localhost:8080/jnlpJars/jenkins-cli.jar"
    dest: "/tmp/jenkins-cli.jar"
    mode: '0755'

- name: Create Jenkins user via CLI using initial admin password
  shell: >
    java -jar /tmp/jenkins-cli.jar
    -s http://localhost:8080
    -auth admin:{{ jenkins_admin_password }}
    groovy = < /tmp/create_user.groovy
  args:
    executable: /bin/bash


- name: Write Groovy script to generate Jenkins API token
  copy:
    dest: /tmp/create_token.groovy
    content: |
      import jenkins.model.*
      import hudson.model.*
      import jenkins.security.*
      import hudson.security.*
      import com.cloudbees.plugins.credentials.*
      import com.cloudbees.plugins.credentials.domains.*
      import jenkins.security.apitoken.*

      def user = User.get('{{ jenkins_username }}', false)
      def apiTokenProperty = user.getProperty(ApiTokenProperty.class)

      def result = apiTokenProperty.tokenStore.generateNewToken('{{ jenkins_token_name }}')
      user.save()
      println(result.plainValue)

- name: Generate API token via Jenkins CLI
  shell: >
    java -jar /tmp/jenkins-cli.jar
    -s http://localhost:8080
    -auth {{ jenkins_username }}:{{ jenkins_password }}
    groovy = < /tmp/create_token.groovy
  args:
    executable: /bin/bash
  register: jenkins_token_output
  changed_when: true

- name: Set API token as fact
  set_fact:
    jenkins_api_token: "{{ jenkins_token_output.stdout | trim }}"

- name: Get Git credentials from TF Vault
  uri:
    url: "{{ remote_vault_address }}/v1/secret/data/git_credentials"
    method: GET
    headers:
      X-Vault-Token: "{{ remote_vault_token }}"
    return_content: yes
  register: vault_response

- name: Set credentials as fact for use in next task
  ansible.builtin.set_fact:
    git_username: "{{ vault_response.json.data.data.git_username }}"
    git_password: "{{ vault_response.json.data.data.git_password }}"

- name: Get Jenkins crumb
  uri:
    url: "https://{{ jenkins_live_domain }}/crumbIssuer/api/json"
    method: GET
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
  register: jenkins_crumb

- name: Execute Groovy script via REST API
  uri:
    url: "https://{{ jenkins_live_domain }}/scriptText"
    method: POST
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
    body_format: form-urlencoded
    body:
      script: |
        import com.cloudbees.plugins.credentials.*
        import com.cloudbees.plugins.credentials.domains.*
        import com.cloudbees.plugins.credentials.impl.*
        import jenkins.model.*

        def username = "{{ git_username }}"
        def password = "{{ git_password }}"
        def description = "Git credentials from Vault"
        def id = "git-credentials"

        def credentials = new UsernamePasswordCredentialsImpl(
          CredentialsScope.GLOBAL, id, description, username, password
        )

        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), credentials)
        println("Credentials created successfully")

# ---------------------------------------------------------------------------
# 7.  Install required Jenkins plugins
# ---------------------------------------------------------------------------
- name: Install OpenID-Connect and Role-Strategy plugins
  community.general.jenkins_plugin:
    name: "{{ item }}"
    state: latest
    url: "http://localhost:8080"
    url_username: admin
    url_password: "{{ jenkins_admin_password }}"
    with_dependencies: true
  loop:
    - openid-connect
    - role-strategy
  notify: restart jenkins

# ---------------------------------------------------------------------------
# 8.  Drop Groovy init script
# ---------------------------------------------------------------------------
- name: Ensure init.groovy.d exists
  ansible.builtin.file:
    path: /var/lib/jenkins/init.groovy.d
    state: directory
    owner: jenkins
    group: jenkins
    mode: "0755"

- name: Deploy OIDC initialisation script
  ansible.builtin.copy:
    src: jenkins/oidc-init.groovy
    dest: /var/lib/jenkins/init.groovy.d/01-oidc.groovy
    owner: jenkins
    group: jenkins
    mode: "0644"
  notify: restart jenkins
