- name: Create dedicated webhook Personal Access Token
  uri:
    url: "https://{{ jenkins_live_domain }}/me/descriptorByName/jenkins.security.ApiTokenProperty/generateNewToken"
    method: POST
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
      Content-Type: "application/x-www-form-urlencoded"
    body_format: form-urlencoded
    body:
      newTokenName: "webhook-dr-{{ ansible_date_time.epoch }}"
      newTokenDescription: "Token for DR webhook automation created on {{ ansible_date_time.iso8601 }}"
    status_code: [200]
    validate_certs: no
    return_content: yes
  register: jenkins_pat_result

- name: Extract Personal Access Token
  set_fact:
    webhook_token: "{{ jenkins_pat_result.json.data.tokenValue }}"
    webhook_token_uuid: "{{ jenkins_pat_result.json.data.tokenUuid }}"
  when: jenkins_pat_result.json.data.tokenValue is defined

- name: Store Jenkins webhook token
  shell: |
    docker exec -i tf_vault sh << EOF
    export VAULT_ADDR="http://127.0.0.1:8200"
    vault login {{ remote_vault_token }}
    vault kv put secret/jenkins_webhook_token -<<EOJSON
    {
      "token": "{{ webhook_token }}",
      "uuid": "{{ webhook_token_uuid }}",
      "created_at": "{{ ansible_date_time.iso8601 }}",
      "job_name": "{{ jenkins_job_name | default('k8s-automated-dr') }}",
      "webhook_url": "https://{{ jenkins_live_domain }}/job/{{ jenkins_job_name | default('k8s-automated-dr') }}/job/main/buildWithParameters",
      "trigger_domain": "https://trigger.{{ jenkins_live_domain }}/trigger",
      "api_approach": "true"
    }
    EOJSON
    EOF
  register: vault_storage_result

- name: Display token generation results
  debug:
    msg:
      - "üîê TOKEN GENERATION & STORAGE COMPLETE"
      - "======================================"
      - "Token: {{ webhook_token }}"
      - "UUID: {{ webhook_token_uuid }}"

- name: Get Jenkins crumb for CSRF protection
  uri:
    url: "https://{{ jenkins_live_domain }}/crumbIssuer/api/json"
    method: GET
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
    return_content: yes
    validate_certs: no
  register: jenkins_crumb

- name: Check if the universal test job exists
  ansible.builtin.uri:
    url: "https://{{ jenkins_live_domain }}/job/{{ test_job_name }}/api/json"
    method: GET
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
    status_code: [200, 404] # 200 = exists, 404 = does not exist
    validate_certs: no
  register: job_check

- name: Create or Update the simple test job
  ansible.builtin.uri:
    url: "https://{{ jenkins_live_domain }}/{{ item }}"
    method: POST
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
    headers:
      Content-Type: "application/xml"
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
    body: "{{ lookup('template', 'universal-test-job.xml.j2') }}"
    status_code: 200
    validate_certs: no
  loop:
    - "createItem?name={{ test_job_name }}"
    - "job/{{ test_job_name }}/config.xml"
  when: >
    (job_check.status == 404 and 'createItem' in item) or
    (job_check.status == 200 and 'config.xml' in item)
  register: job_creation_result

- name: Trigger the job universally using the PAT
  ansible.builtin.uri:
    url: "https://{{ jenkins_live_domain }}/job/{{ test_job_name }}/build"
    method: POST
    # The PAT is used here for authentication
    user: "{{ jenkins_username }}"
    password: "{{ webhook_token }}"
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
    status_code: 201 # Expect '201 Created' on a successful trigger
    validate_certs: no
  changed_when: true
  register: job_trigger_verification

- name: Display universal trigger test result
  ansible.builtin.debug:
    msg: "‚úÖ API trigger test successful. The job '{{ test_job_name }}' was started using the PAT."
  register: webhook_test

- name: Clean up by removing the test job
  ansible.builtin.uri:
    url: "https://{{ jenkins_live_domain }}/job/{{ test_job_name }}/doDelete"
    method: POST
    user: "{{ jenkins_username }}"
    password: "{{ jenkins_api_token }}"
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ jenkins_crumb.json.crumb }}"
    status_code: [200, 302]
    validate_certs: no

- name: Create application user
  user:
    name: "{{ app_user }}"
    system: true
    shell: /bin/bash
    home: "{{ app_dir }}"
    create_home: no

- name: Create application directory
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'

- name: Create logs directory
  file:
    path: "{{ app_dir }}/logs"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'

- name: Add NodeSource Node.js 18.x APT repository
  shell: curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
  args:
    executable: /bin/bash

- name: Install Node.js 18 and npm
  apt:
    name: nodejs
    state: present
    update_cache: yes

- name: Install Redis
  apt:
    name: redis-server
    state: present
    update_cache: yes
    
- name: Synchronize trigger application files
  synchronize:
    src: "{{ playbook_dir }}/files/trigger/"
    dest: "{{ app_dir }}/"
    recursive: yes

- name: Set ownership of application files
  file:
    path: "{{ app_dir }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    recurse: yes

- name: Install Node.js dependencies
  npm:
    path: "{{ app_dir }}/."
    state: present
    production: true
  become_user: "{{ app_user }}"
  become_method: sudo

- name: Ensure dotenv is installed
  npm:
    name: dotenv
    path: "{{ app_dir }}"
    state: present
  become_user: "{{ app_user }}"

- name: Create .env file from template
  template:
    src: "{{ playbook_dir }}/templates/nodejs-trigger.env.j2"
    dest: "{{ app_dir }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0600"  # Secure permissions for sensitive data
  notify:
    - restart {{ app_name }}

- name: Install systemd unit for nodejs-trigger service
  ansible.builtin.copy:
    dest: /etc/systemd/system/{{ app_name }}.service
    mode: "0644"
    content: |
      [Unit]
      Description=Node.js Jenkins Trigger Service
      Documentation=https://github.com/your-org/nodejs-trigger
      After=network.target redis.service
      Wants=redis.service

      [Service]
      Type=simple
      User={{ app_user }}
      Group={{ app_user }}
      WorkingDirectory={{ app_dir }}
      Environment=NODE_ENV=production
      EnvironmentFile={{ app_dir }}/.env
      ExecStart=/usr/bin/node {{ app_dir }}/index.js
      ExecReload=/bin/kill -HUP $MAINPID
      Restart=always
      RestartSec=5
      StandardOutput=journal
      StandardError=journal
      SyslogIdentifier={{ app_name }}

      # Security settings
      NoNewPrivileges=true
      PrivateTmp=true
      ProtectSystem=strict
      ProtectHome=true
      ReadWritePaths={{ app_dir }}

      # Resource limits
      LimitNOFILE=65536
      LimitNPROC=4096

      [Install]
      WantedBy=multi-user.target
  notify:
    - reload systemd
    - restart {{ app_name }}
    
- name: Enable and start Node.js service
  systemd:
    name: "{{ app_name }}"
    enabled: true
    state: started
    daemon_reload: true

- name: Check service status
  systemd:
    name: "{{ app_name }}"
    state: started
  register: service_status

- name: Display service information
  debug:
    msg:
      - "‚úÖ Node.js Trigger Service Setup Complete"
      - "Service: {{ app_name }}"
      - "Status: {{ service_status.status.ActiveState }}"
      - "Port: {{ service_port }}"
      - "Directory: {{ app_dir }}"
      - "User: {{ app_user }}"
      - ""
      - "üîó Endpoints:"
      - "  Health Check: http://trigger.{{ jenkins_live_domain }}/health"
      - "  Trigger: POST http://trigger.{{ jenkins_live_domain }}/trigger"
      - "  Queue Status: http://trigger.{{ jenkins_live_domain }}/queue/status"
      - ""
      - "üìù Test with:"
      - "curl -X POST http://trigger.{{ jenkins_live_domain }}/trigger \\"
      - "  -H 'Content-Type: application/json' \\"
      - "  -d '{\"parameters\":{\"deploy_standby_only\":\"true\"}}'"

# ---------------------------------------------------------------------------
# 1. Issue new cert for trigger.<ip>.<suffix>
# ---------------------------------------------------------------------------
- name: Attempt certbot for trigger.<ip>.<suffix>
  shell: |
    DOMAIN="trigger.{{ jenkins_public_ip }}.{{ item }}"
    if [ ! -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
      certbot certonly --nginx --non-interactive --agree-tos \
              --email {{ letsencrypt_email }} \
              --redirect \
              -d "${DOMAIN}"
    fi
  args:
    executable: /bin/bash
  register: certbot_trigger_attempts
  failed_when: false
  loop: "{{ public_suffixes }}"
  loop_control:
    label: "trigger.{{ jenkins_public_ip }}.{{ item }}"
  notify: reload nginx

- name: Record successful domain for nodejs-trigger
  set_fact:
    certbot_obtained: true
    trigger_live_domain: "{{ item.item | ternary('trigger.' ~ jenkins_public_ip ~ '.' ~ item.item, '') }}"
  when: item.rc is defined and item.rc == 0
  loop: "{{ certbot_trigger_attempts.results }}"

- name: Fail if cert not obtained for nodejs-trigger
  fail:
    msg: >
      Could not obtain a certificate for trigger.<ip>.<suffix>. Tried:
      {{ public_suffixes | map('regex_replace', '(.*)', 'trigger.' ~ jenkins_public_ip ~ '.\\1') | join(', ') }}
  when: trigger_live_domain is not defined

- name: Install HTTPS vhost for nodejs-trigger
  copy:
    dest: /etc/nginx/sites-available/nodejs-ssl.conf
    mode: "0644"
    content: |
      server {
          listen 443 ssl http2;
          server_name {{ trigger_live_domain }};

          ssl_certificate     /etc/letsencrypt/live/{{ trigger_live_domain }}/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/{{ trigger_live_domain }}/privkey.pem;

          ssl_protocols       TLSv1.2 TLSv1.3;
          ssl_session_cache   shared:SSL:10m;
          ssl_prefer_server_ciphers on;

          location / {
              proxy_pass http://127.0.0.1:{{ service_port }};
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
          }

          location /health {
              proxy_pass http://127.0.0.1:{{ service_port }};
              access_log off;
          }

          access_log /var/log/nginx/{{ app_name }}_access.log;
          error_log /var/log/nginx/{{ app_name }}_error.log;
      }
  notify: reload nginx

- name: Install HTTP‚ÜíHTTPS redirect for nodejs-trigger
  copy:
    dest: /etc/nginx/sites-available/nodejs-http.conf
    mode: "0644"
    content: |
      server {
          listen 80;
          server_name {{ trigger_live_domain }};
          return 301 https://$host$request_uri;
      }
  notify: reload nginx

- name: Enable nodejs HTTPS vhost
  file:
    src: /etc/nginx/sites-available/nodejs-ssl.conf
    dest: /etc/nginx/sites-enabled/nodejs-ssl.conf
    state: link
  notify: reload nginx

- name: Enable nodejs HTTP redirect vhost
  file:
    src: /etc/nginx/sites-available/nodejs-http.conf
    dest: /etc/nginx/sites-enabled/nodejs-http.conf
    state: link
  notify: reload nginx

# Display comprehensive results
- name: Display API-based webhook automation results
  debug:
    msg:
      - "üéØ API-BASED WEBHOOK AUTOMATION COMPLETE"
      - "=========================================="
      - "‚úÖ Job Creation: {{ 'SUCCESS' if job_creation_result.status in [200, 201] else 'FAILED' }}"
      - "‚úÖ Job Verification: {{ 'SUCCESS' if job_trigger_verification.status == 200 else 'FAILED' }}"
      - "‚úÖ Vault Storage: {{ 'SUCCESS' if vault_storage_result.rc == 0 else 'FAILED' }}"
      - "‚úÖ Webhook Test: {{ 'SUCCESS' if webhook_test.status in [200, 201, 302] else 'FAILED (' + webhook_test.status|string + ')' }}"
      - ""
      - "üîó ENDPOINTS:"
      - "   Trigger URL: https://{{ jenkins_live_domain }}/job/{{ jenkins_job_name }}/buildWithParameters"
      - "   Job Console: https://{{ jenkins_live_domain }}/job/{{ jenkins_job_name }}/"
      - "   Job Config: https://{{ jenkins_live_domain }}/job/{{ jenkins_job_name }}/configure"
      - ""
