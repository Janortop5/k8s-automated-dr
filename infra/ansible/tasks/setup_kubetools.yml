- name: "Ensure br_netfilter module is loaded"
  modprobe:
    name: br_netfilter
    state: present

- name: "Persist br_netfilter on boot"
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    create: yes
    line: br_netfilter
  when: ansible_distribution == 'Ubuntu'

- name: "Enable net.bridge sysctls"
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: net.bridge.bridge-nf-call-ip6tables, value: 1 }
    - { name: net.bridge.bridge-nf-call-iptables,  value: 1 }
  when: ansible_distribution == 'Ubuntu'

- name: "Install APT prerequisites"
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
    update_cache: yes
  when: ansible_distribution == 'Ubuntu'

- name: "Create keyrings directory"
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  when: ansible_distribution == 'Ubuntu'

- name: "Add Kubernetes GPG key"
  apt_key:
    url: "https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/Release.key"
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: ansible_distribution == 'Ubuntu'

- name: "Add Kubernetes APT repository"
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ kube_version }}/deb/ /"
    filename: kubernetes
    state: present
  when: ansible_distribution == 'Ubuntu'

- name: "Refresh APT cache"
  apt:
    update_cache: yes
  when: ansible_distribution == 'Ubuntu'

- name: "Install kubelet, kubeadm, kubectl"
  apt:
    name:
      - "kubelet"
      - "kubeadm"
      - "kubectl"
    state: present
  when: ansible_distribution == 'Ubuntu'

- name: Hold package version using apt-mark
  command: apt-mark hold kubelet
  when: ansible_distribution == 'Ubuntu'

- name: "Disable swap now"
  command: swapoff -a
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_swaptotal_mb > 0

- name: "Comment out swap entries in fstab"
  replace:
    path: /etc/fstab
    regexp: '^([^#].*\sswap\s+.*)$'
    replace: '#\1'
  when: ansible_distribution == 'Ubuntu'

- name: "Configure crictl to use containerd socket"
  shell: crictl config --set runtime-endpoint=unix:///run/containerd/containerd.sock
  args:
    creates: /etc/crictl.yaml

- name: Download CNI plugin archive
  ansible.builtin.get_url:
    url: >-
      https://github.com/containernetworking/plugins/releases/download/{{ cni_plugin_version }}/cni-plugins-linux-{{ cni_plugin_arch }}-{{ cni_plugin_version }}.tgz
    dest: /tmp/cni-plugins.tgz
  register: dl_cni
  until: dl_cni is succeeded
  retries: 3
  delay: 5

- name: Install CNI plugins
  ansible.builtin.unarchive:
    src: /tmp/cni-plugins.tgz
    dest: /opt/cni/bin
    remote_src: yes

- name: Ensure CNI config dir exists
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: directory
    mode: '0755'

- name: "Next steps: install Calico or join workers"
  debug:
    msg: |
      After `kubeadm init` on the control plane, run:
        kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      On each worker node, join with:
        sudo kubeadm join <your-master-endpoint> --token <token> \
          --discovery-token-ca-cert-hash sha256:<hash>
